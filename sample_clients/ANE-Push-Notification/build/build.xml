<?xml version="1.0" encoding="UTF-8"?>
<project name="Air Native Extension Build Scripts" default="all">

	<!-- Config -->
	<property file="build.config"/>

    <!-- Load ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

  <!-- Sets the FlexTasks.jar file that contains the build tasks -->
  <taskdef resource="flexTasks.tasks" classpath="${flex.sdk}/ant/lib/flexTasks.jar"/>

	<!-- All -->
	<target name="all" depends="ios,android,swc,package" description="Full build of extension"/>
	<!-- target name="all-android-debug" depends="ios,android-debug,swc,package" description="Full build of extension w/debugging on Android"/ -->

	<!-- iOS -->
	<target name="ios" description="Build iOS Library">
		<mkdir dir="../build/temp/ios/build/"/>

		<exec executable="xcodebuild" failonerror="true" dir="../ios/">
			<arg line="-project ${name}.xcodeproj"/>
			<arg line="-alltargets clean"/>
		</exec>

		<exec executable="xcodebuild" failonerror="true" dir="../ios/">
			<arg line="-project ${name}.xcodeproj"/>
			<arg line="-sdk ${ios.sdkversion}"/>
			<arg line="-alltargets"/>
			<arg line="-configuration Release"/>
			<arg line="SYMROOT=../build/temp/ios/build/"/>
		</exec>

		<copy file="../build/temp/ios/build/Release-iphoneos/lib${name}.a" todir="../build/temp/ios" overwrite="true"/>

		<delete dir="../build/temp/ios/build/"/>
	</target>

    <!-- Android -->
    <target name="android" description="Build Android Library with debugging disabled">
        <property name="build.type" value="release"/>
        <property name="build.bundle.type" value="default"/>
        <property name="build.TYPE" value="Release"/>
        <antcall target="android-build"/>
    </target>
    <target name="android-debug" description="Build Android Library with debugging enabled">
        <property name="build.type" value="debug"/>
        <property name="build.bundle.type" value="debug"/>
        <property name="build.TYPE" value="Debug"/>
        <antcall target="android-build"/>
    </target>
    <target name="android-build" description="Build Android Library">
        <!-- paths -->
        <property name="build.intermediates" value="${android.app.lib}/build/intermediates"/>
        <property name="build.classes.path" value="${build.intermediates}/bundles/${build.bundle.type}"/>
        <property name="build.exploded-aar" value="${build.intermediates}/exploded-aar"/>

        <!-- make the build directory -->
        <mkdir dir="temp/android"/>

        <exec executable="/usr/libexec/java_home" outputproperty="java.home">
            <!-- <arg line="-v 1.8" /> -->
        </exec>
	<echo message="JAVA HOME = ${java.home}" />
        <!-- clean the build -->
        <exec executable="./gradlew" dir="../android">
            <env key="JAVA_HOME" path="${java.home}"/>
            <env key="ANDROID_HOME" path="${android.sdk.home}"/>
            <arg line="clean"/>
        </exec>

        <!-- compile the java code -->
        <exec executable="./gradlew" dir="../android">
            <env key="JAVA_HOME" path="${java.home}"/>
            <env key="ANDROID_HOME" path="${android.sdk.home}"/>
            <arg line=":lib:assemble${build.TYPE}"/>
        </exec>

        <!-- get jar file from Android Studio build  -->
	<echo message="Copying app jar ${build.intermediates}/bundles/${build.bundle.type}/classes.jar to temp/android/lib${name}.jar" />
 	<copy file="${build.intermediates}/bundles/${build.bundle.type}/classes.jar" tofile="temp/android/lib${name}.jar"/>

        <!-- Copy over required resources -->
        <if>
            <equals arg1="${include.shared.resources}" arg2="true"/>
            <then>
		<echo message="Copying resources ${build.intermediates}/res/merged/${build.type} to temp/android/res-${name}" />
                <copy todir="temp/android/res-${name}">
            		<fileset dir="${build.intermediates}/res/merged/${build.type}"/>
                </copy>
            </then>
        </if>

        <!-- Copy over the required libs -->
	<echo message="Copying libs ${build.classes.path}/libs to temp/android" />
        <copy todir="temp/android">
            <fileset dir="${build.classes.path}/libs" excludes="FlashRuntimeExtensions.jar, runtimeClasses.jar"/>
        </copy>
        
        <!-- Copy over the exploded aar libs -->
        <exec executable="/bin/bash">
            <arg value="extractJars.sh"/>
        </exec>
    </target>

	<!-- Actionscript -->
	<target name="swc" description="Build SWC library">
		<mkdir dir="temp/swc/content/"/>

		<fileset dir="../actionscript/src" casesensitive="yes" id="classfiles">
			<include name="**/*.as"/>
		</fileset>

		<pathconvert property="classlist" refid="classfiles" pathsep=" " dirsep=".">
			<regexpmapper from=".*src.(.*)\.as" to="\1"/>
		</pathconvert>

		<exec executable="${flex.sdk}/bin/compc${bin.ext}" failonerror="true">
			<arg line='-source-path ../actionscript/src'/>
			<arg line='-output temp/swc/${name}.swc'/>
			<arg line='-swf-version=29'/>
			<arg line='-external-library-path+="${flex.sdk}/frameworks/libs/air/airglobal.swc"'/>
			<arg line='-include-classes ${classlist}'/>
		</exec>

		<unzip src="temp/swc/${name}.swc" dest="temp/swc/content" overwrite="true"/>
		<copy file="temp/swc/content/library.swf" todir="temp/ios" overwrite="true"/>
		<copy file="temp/swc/content/library.swf" todir="temp/android" overwrite="true"/>
		<copy file="temp/swc/content/library.swf" todir="temp/default" overwrite="true"/>
		<delete dir="temp/swc/content/"/>
	</target>

	<!-- Package -->
	<target name="package" description="Create the extension package">
	<condition property="OUTPUT_FILENAME" value="${name}_multiMsg" else="${name}">
            <istrue value="${useMultiMsg}"/>
        </condition>

		<exec executable="${flex.sdk}/bin/adt${bin.ext}" failonerror="true" dir="temp">
			<arg value="-package"/>
			<arg value="-target"/>
			<arg value="ane"/>
			<arg value="${OUTPUT_FILENAME}.ane"/>
			<arg value="../extension.xml"/>
			<arg line="-swc swc/${name}.swc"/>
			<arg line="-platform iPhone-ARM -platformoptions ../platform-ios.xml -C ios/ ."/>
			<arg line="-platform Android-ARM -platformoptions ../platform-android.xml -C android/ ."/>
			<arg line="-platform default -C default/ ."/>
		</exec>

		<move file="temp/${OUTPUT_FILENAME}.ane" todir="../bin"/>
		<delete dir="temp"/>
	</target>

</project>
